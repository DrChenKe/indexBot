/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables;


import com.scomarlf.generated.Indexbot;
import com.scomarlf.generated.tables.records.VEnrollRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VEnroll extends TableImpl<VEnrollRecord> {

    private static final long serialVersionUID = -108164941;

    /**
     * The reference instance of <code>indexBot.v_enroll</code>
     */
    public static final VEnroll V_ENROLL = new VEnroll();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VEnrollRecord> getRecordType() {
        return VEnrollRecord.class;
    }

    /**
     * The column <code>indexBot.v_enroll.id</code>. 主键
     */
    public final TableField<VEnrollRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "主键");

    /**
     * The column <code>indexBot.v_enroll.userId</code>. 用户ID
     */
    public final TableField<VEnrollRecord, Long> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.BIGINT, this, "用户ID");

    /**
     * The column <code>indexBot.v_enroll.channelId</code>. 申请频道ID
     */
    public final TableField<VEnrollRecord, Long> CHANNELID = createField(DSL.name("channelId"), org.jooq.impl.SQLDataType.BIGINT, this, "申请频道ID");

    /**
     * The column <code>indexBot.v_enroll.channelCode</code>. 申请频道 username
     */
    public final TableField<VEnrollRecord, String> CHANNELCODE = createField(DSL.name("channelCode"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "申请频道 username");

    /**
     * The column <code>indexBot.v_enroll.inviteLink</code>. 申请频道私有链接
     */
    public final TableField<VEnrollRecord, String> INVITELINK = createField(DSL.name("inviteLink"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "申请频道私有链接");

    /**
     * The column <code>indexBot.v_enroll.title</code>. 名称
     */
    public final TableField<VEnrollRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "名称");

    /**
     * The column <code>indexBot.v_enroll.remark</code>. 简介
     */
    public final TableField<VEnrollRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.CLOB, this, "简介");

    /**
     * The column <code>indexBot.v_enroll.tag</code>. 标签
     */
    public final TableField<VEnrollRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "标签");

    /**
     * The column <code>indexBot.v_enroll.classification</code>. 分类
     */
    public final TableField<VEnrollRecord, String> CLASSIFICATION = createField(DSL.name("classification"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "分类");

    /**
     * The column <code>indexBot.v_enroll.classificationName</code>. 名
     */
    public final TableField<VEnrollRecord, String> CLASSIFICATIONNAME = createField(DSL.name("classificationName"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "名");

    /**
     * The column <code>indexBot.v_enroll.time</code>. 申请时间
     */
    public final TableField<VEnrollRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "申请时间");

    /**
     * The column <code>indexBot.v_enroll.enrollStatus</code>. 是否提交
     */
    public final TableField<VEnrollRecord, Boolean> ENROLLSTATUS = createField(DSL.name("enrollStatus"), org.jooq.impl.SQLDataType.BIT, this, "是否提交");

    /**
     * The column <code>indexBot.v_enroll.approveUserId</code>. 用户ID
     */
    public final TableField<VEnrollRecord, Long> APPROVEUSERID = createField(DSL.name("approveUserId"), org.jooq.impl.SQLDataType.BIGINT, this, "用户ID");

    /**
     * The column <code>indexBot.v_enroll.approveTime</code>. 审核时间
     */
    public final TableField<VEnrollRecord, LocalDateTime> APPROVETIME = createField(DSL.name("approveTime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "审核时间");

    /**
     * The column <code>indexBot.v_enroll.approveStatus</code>. 审核状态 通过不通过
     */
    public final TableField<VEnrollRecord, Boolean> APPROVESTATUS = createField(DSL.name("approveStatus"), org.jooq.impl.SQLDataType.BIT, this, "审核状态 通过不通过");

    /**
     * Create a <code>indexBot.v_enroll</code> table reference
     */
    public VEnroll() {
        this(DSL.name("v_enroll"), null);
    }

    /**
     * Create an aliased <code>indexBot.v_enroll</code> table reference
     */
    public VEnroll(String alias) {
        this(DSL.name(alias), V_ENROLL);
    }

    /**
     * Create an aliased <code>indexBot.v_enroll</code> table reference
     */
    public VEnroll(Name alias) {
        this(alias, V_ENROLL);
    }

    private VEnroll(Name alias, Table<VEnrollRecord> aliased) {
        this(alias, aliased, null);
    }

    private VEnroll(Name alias, Table<VEnrollRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `v_enroll` as select `e`.`id` AS `id`,`e`.`userId` AS `userId`,`e`.`channelId` AS `channelId`,`e`.`channelCode` AS `channelCode`,`e`.`inviteLink` AS `inviteLink`,`e`.`title` AS `title`,`e`.`remark` AS `remark`,`e`.`tag` AS `tag`,`e`.`classification` AS `classification`,`d`.`label` AS `classificationName`,`e`.`time` AS `time`,`e`.`status` AS `enrollStatus`,`a`.`userId` AS `approveUserId`,`a`.`time` AS `approveTime`,`a`.`status` AS `approveStatus` from ((`indexBot`.`enroll` `e` left join `indexBot`.`approve` `a` on((`e`.`id` = `a`.`enrollId`))) left join `indexBot`.`dictionary` `d` on((`e`.`classification` = `d`.`id`)))"));
    }

    public <O extends Record> VEnroll(Table<O> child, ForeignKey<O, VEnrollRecord> key) {
        super(child, key, V_ENROLL);
    }

    @Override
    public Schema getSchema() {
        return Indexbot.INDEXBOT;
    }

    @Override
    public VEnroll as(String alias) {
        return new VEnroll(DSL.name(alias), this);
    }

    @Override
    public VEnroll as(Name alias) {
        return new VEnroll(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VEnroll rename(String name) {
        return new VEnroll(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VEnroll rename(Name name) {
        return new VEnroll(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, Long, Long, String, String, String, String, String, String, String, LocalDateTime, Boolean, Long, LocalDateTime, Boolean> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
