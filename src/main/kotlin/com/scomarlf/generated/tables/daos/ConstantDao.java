/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables.daos;


import com.scomarlf.generated.tables.Constant;
import com.scomarlf.generated.tables.records.ConstantRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConstantDao extends DAOImpl<ConstantRecord, com.scomarlf.generated.tables.pojos.Constant, String> {

    /**
     * Create a new ConstantDao without any configuration
     */
    public ConstantDao() {
        super(Constant.CONSTANT, com.scomarlf.generated.tables.pojos.Constant.class);
    }

    /**
     * Create a new ConstantDao with an attached configuration
     */
    public ConstantDao(Configuration configuration) {
        super(Constant.CONSTANT, com.scomarlf.generated.tables.pojos.Constant.class, configuration);
    }

    @Override
    public String getId(com.scomarlf.generated.tables.pojos.Constant object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Constant> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Constant.CONSTANT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Constant> fetchById(String... values) {
        return fetch(Constant.CONSTANT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.scomarlf.generated.tables.pojos.Constant fetchOneById(String value) {
        return fetchOne(Constant.CONSTANT.ID, value);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Constant> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Constant.CONSTANT.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Constant> fetchByContent(String... values) {
        return fetch(Constant.CONSTANT.CONTENT, values);
    }
}
