/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables;


import com.scomarlf.generated.Indexbot;
import com.scomarlf.generated.Keys;
import com.scomarlf.generated.tables.records.EnrollRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Enroll extends TableImpl<EnrollRecord> {

    private static final long serialVersionUID = -480754312;

    /**
     * The reference instance of <code>indexBot.enroll</code>
     */
    public static final Enroll ENROLL = new Enroll();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnrollRecord> getRecordType() {
        return EnrollRecord.class;
    }

    /**
     * The column <code>indexBot.enroll.id</code>. 主键
     */
    public final TableField<EnrollRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "主键");

    /**
     * The column <code>indexBot.enroll.userId</code>. 用户ID
     */
    public final TableField<EnrollRecord, Long> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.BIGINT, this, "用户ID");

    /**
     * The column <code>indexBot.enroll.channelId</code>. 申请频道ID
     */
    public final TableField<EnrollRecord, Long> CHANNELID = createField(DSL.name("channelId"), org.jooq.impl.SQLDataType.BIGINT, this, "申请频道ID");

    /**
     * The column <code>indexBot.enroll.channelCode</code>. 申请频道 username
     */
    public final TableField<EnrollRecord, String> CHANNELCODE = createField(DSL.name("channelCode"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "申请频道 username");

    /**
     * The column <code>indexBot.enroll.inviteLink</code>. 申请频道私有链接
     */
    public final TableField<EnrollRecord, String> INVITELINK = createField(DSL.name("inviteLink"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "申请频道私有链接");

    /**
     * The column <code>indexBot.enroll.title</code>. 名称
     */
    public final TableField<EnrollRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "名称");

    /**
     * The column <code>indexBot.enroll.remark</code>. 简介
     */
    public final TableField<EnrollRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.CLOB, this, "简介");

    /**
     * The column <code>indexBot.enroll.tag</code>. 标签
     */
    public final TableField<EnrollRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "标签");

    /**
     * The column <code>indexBot.enroll.classification</code>. 分类
     */
    public final TableField<EnrollRecord, String> CLASSIFICATION = createField(DSL.name("classification"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "分类");

    /**
     * The column <code>indexBot.enroll.time</code>. 申请时间
     */
    public final TableField<EnrollRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "申请时间");

    /**
     * The column <code>indexBot.enroll.status</code>. 是否提交
     */
    public final TableField<EnrollRecord, Boolean> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.BIT, this, "是否提交");

    /**
     * Create a <code>indexBot.enroll</code> table reference
     */
    public Enroll() {
        this(DSL.name("enroll"), null);
    }

    /**
     * Create an aliased <code>indexBot.enroll</code> table reference
     */
    public Enroll(String alias) {
        this(DSL.name(alias), ENROLL);
    }

    /**
     * Create an aliased <code>indexBot.enroll</code> table reference
     */
    public Enroll(Name alias) {
        this(alias, ENROLL);
    }

    private Enroll(Name alias, Table<EnrollRecord> aliased) {
        this(alias, aliased, null);
    }

    private Enroll(Name alias, Table<EnrollRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Enroll(Table<O> child, ForeignKey<O, EnrollRecord> key) {
        super(child, key, ENROLL);
    }

    @Override
    public Schema getSchema() {
        return Indexbot.INDEXBOT;
    }

    @Override
    public UniqueKey<EnrollRecord> getPrimaryKey() {
        return Keys.KEY_ENROLL_PRIMARY;
    }

    @Override
    public List<UniqueKey<EnrollRecord>> getKeys() {
        return Arrays.<UniqueKey<EnrollRecord>>asList(Keys.KEY_ENROLL_PRIMARY);
    }

    @Override
    public Enroll as(String alias) {
        return new Enroll(DSL.name(alias), this);
    }

    @Override
    public Enroll as(Name alias) {
        return new Enroll(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Enroll rename(String name) {
        return new Enroll(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Enroll rename(Name name) {
        return new Enroll(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Long, Long, String, String, String, String, String, String, LocalDateTime, Boolean> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
